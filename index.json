[{"content":"\u003cp\u003eHarshavardhan M\u003cbr\u003e\nB.Tech in Computer Science, specialized in Artificial Intelligence\u003c/p\u003e\n\u003ch2 id=\"education\"\u003eEducation\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDegree/Certificate\u003c/th\u003e\n\u003cth\u003eInstitute/Board\u003c/th\u003e\n\u003cth\u003eCGPA/Percentage\u003c/th\u003e\n\u003cth\u003eYear\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eB.Tech.\u003c/td\u003e\n\u003ctd\u003eAmrita Vishwa Vidyapeetham, Kollam\u003c/td\u003e\n\u003ctd\u003e8.52\u003c/td\u003e\n\u003ctd\u003e2019-2023\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSenior Secondary\u003c/td\u003e\n\u003ctd\u003eCBSE Board\u003c/td\u003e\n\u003ctd\u003e92.0%\u003c/td\u003e\n\u003ctd\u003e2019\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSecondary\u003c/td\u003e\n\u003ctd\u003eCBSE Board\u003c/td\u003e\n\u003ctd\u003e100%\u003c/td\u003e\n\u003ctd\u003e2017\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"experience\"\u003eExperience\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eBeSuperhuman.ai\u003c/strong\u003e (June 2023 - present, Remote)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLead Machine Learning Engineer\u003c/li\u003e\n\u003cli\u003eDeveloped the Minimum Viable Product (MVP), overseeing backend infrastructure and AI models utilizing cutting-edge LLMs (Large Language Models), Langchain. Was able to cut costs more than tenfold, by integrating vector databases for prompt retrieval.\u003c/li\u003e\n\u003cli\u003eCreated an autonomous agent with Langchain and LLM technologies, featuring a custom BabyAGI version that autonomously navigates browsers and emulates human inputs, resulting in improved task efficiency and reduced manual intervention.\u003c/li\u003e\n\u003cli\u003eEngineered a cutting-edge desktop application from inception to completion, utilizing technologies such as Electron Python, Flask, and implementing a browser control module using Seleniumbase.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAgrisoft Diary and Agro Producer Company Ltd.\u003c/strong\u003e (Jan 2022 - April 2022, Kollam)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFull Stack Developer Intern\u003c/li\u003e\n\u003cli\u003eDesigned and implemented a novel ERP software pipeline.\u003c/li\u003e\n\u003cli\u003eWorked on the development of two Flutter applications with Firebase as the backend.\u003c/li\u003e\n\u003cli\u003eDeveloped a REST API using Express and created a custom user interface to access the backend.\u003c/li\u003e\n\u003cli\u003eDesigned and integrated a payment solution tailored to client needs.\u003c/li\u003e\n\u003cli\u003eLed weekly client meetings to facilitate open communication and ensure seamless project development.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAmritaCREATE Labs\u003c/strong\u003e (June 2022 - April 2023, Amritapuri)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDeep Learning Research Intern\u003c/li\u003e\n\u003cli\u003eAn edu-tech research initiative that are funded principally by research grants.\u003c/li\u003e\n\u003cli\u003eWorking on Sign Language Accessibility for e-Governance Services at Amrita CREATE. We use AI/ML for sign language recognition of questions, that is asked to the chatbot in FAQs across 25 UMANG services.\u003c/li\u003e\n\u003cli\u003eDeveloped a Deep Learning pipeline and successfully implemented a custom BERT model tailored to address this specific problem.\u003c/li\u003e\n\u003cli\u003eCreated a pioneering solution by integrating heatmaps into the pretraining process of a transformer-based model.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"projects\"\u003eProjects\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eNot Blue Chrome Extension (Deep Learning/NLP)\u003c/strong\u003e (May 2021)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDeveloped a chrome extension that monitors the search activity of a user to identify potential signs of depression.\u003c/li\u003e\n\u003cli\u003eUtilized a deep learning LSTM model to calculate a sentiment score for each search phrase.\u003c/li\u003e\n\u003cli\u003eImplemented a threshold mechanism to detect concerning levels of sentiment, triggering an email notification to the user\u0026rsquo;s friends and family.\u003c/li\u003e\n\u003cli\u003eTools \u0026amp; technologies used: Tensorflow, Flask, Javascript\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePacket Sniffer (Computer Networking)\u003c/strong\u003e (October 2021)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDeveloped a simple packet sniffing tool using Python.\u003c/li\u003e\n\u003cli\u003eImplemented the tool to capture data on a raw socket and provided an interactive dashboard to display network usage and other relevant information.\u003c/li\u003e\n\u003cli\u003eWorked on the Flask back-end and parts of the front end.\u003c/li\u003e\n\u003cli\u003eTools \u0026amp; technologies used: Python, Flask, HTML, Bootstrap, JavaScript, and jQuery.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSpace Invaders using Deep Q-Learning (Reinforcement Learning)\u003c/strong\u003e (May 2022)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA bot that plays the classic atari game, Space Invaders.\u003c/li\u003e\n\u003cli\u003eSpace Invaders is a classic japanese shooting video game that was released for Atari 6000.\u003c/li\u003e\n\u003cli\u003eThis bot was trained using a convolutional neural network as a feature extractor. It was then trained using the dueling neural network strategy.\u003c/li\u003e\n\u003cli\u003eTools \u0026amp; technologies used: Python, Keras, Arcade Learning Environments\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"technical-skills-and-spoken-languages\"\u003eTechnical Skills And Spoken Languages\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eProgramming: Python, Java, MATLAB, R, HTML/CSS, Javascript, Dart, Bash, Kotlin\u003c/li\u003e\n\u003cli\u003eTools \u0026amp; OS: Visual Studio, Jupyter Notebook, Google Collab, Git, Flutter, Android Studio, Gazebo\u003c/li\u003e\n\u003cli\u003eLibraries/Frameworks: Pandas, Numpy, PyTorch, Tensorflow, nodeJS\u003c/li\u003e\n\u003cli\u003eLanguages: English, Hindi, Malayalam\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"awards-and-extra-curricular-activities\"\u003eAwards and Extra Curricular Activities\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eAMFOSS\u003c/strong\u003e (2019)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOpen source coding club\u003c/li\u003e\n\u003cli\u003eContributed to open source repositories in the fields of Android app development and web development.\u003c/li\u003e\n\u003cli\u003eActively participated in diverse club activities, including attending tech talks and hackathons.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAyudh Amritapuri\u003c/strong\u003e (2019-2022)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInternational Non-Governmental Organization\u003c/li\u003e\n\u003cli\u003eVolunteer for Amala Bharatam Campaign, AYUDH India, participated in clean-up drives and organized awareness drives in 7 venues with a team of 200+ in August 2019.\u003c/li\u003e\n\u003cli\u003eConducted multiple webinars on \u0026ldquo;Open source software and why you should get started\u0026rdquo; for underprivileged high school graduates, helping them embark on their software journey.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAI at Amrita\u003c/strong\u003e (2020-2022)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCoding club for AI/ML developers\u003c/li\u003e\n\u003cli\u003eWorked on multiple machine learning pipelines and actively participated in numerous competitions and hackathons.\u003c/li\u003e\n\u003cli\u003eConducted informative seminars on machine learning algorithms to support the learning and development of newer club members.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eCubers at Amrita\u003c/strong\u003e (2020-2023)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSpeed cubing club for Rubik’s cube enthusiasts.\u003c/li\u003e\n\u003cli\u003eParticipated in and helped organize multiple international speed cubing events recognized by the World Cube Association.\u003c/li\u003e\n\u003cli\u003eDeveloped strong collaboration skills within the team, facilitating the on-boarding of new club members.\u003c/li\u003e\n\u003c/ul\u003e\n","description":null,"image":null,"permalink":"https://codevardhan.github.io/resume/","title":"My Resume"},{"content":"\u003ch1 id=\"eazypredict---running-and-comparing-multiple-ml-models-at-once\"\u003eEazyPredict - Running and comparing multiple ML models at once\u003c/h1\u003e\n\u003cp\u003eWelcome to the world of \u0026lsquo;EazyPredict\u0026rsquo;, a Python module that aims to make trying out multiple prediction algorithms as simple and efficient as possible. The module was heavily influenced by the \u0026lsquo;LazyPredict\u0026rsquo; module. I developed this module to address a few shortcomings I identified in LazyPredict.\u003c/p\u003e\n\u003ch2 id=\"why-eazypredict\"\u003eWhy EazyPredict?\u003c/h2\u003e\n\u003cp\u003eSome of its key features are as follows -\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eThe \u0026lsquo;EazyPredict\u0026rsquo; module utilizes a limited number of prediction algorithms (10) in order to minimize memory usage and prevent potential issues on platforms such as Kaggle.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUsers have the option to input a custom list of prediction algorithms (as demonstrated in the example provided) in order to perform personalized comparisons with estimators of their choosing.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe models can be saved to an output folder at the user\u0026rsquo;s discretion and are returned as a dictionary, allowing for easy addition of custom hyperparameters.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe top N models can be selected to create an ensemble using a voting classifier.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"using-it-for-classification\"\u003eUsing it for classification\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s try it on \u003ca href=\"https://www.kaggle.com/c/titanic\"\u003ethis introductory problem\u003c/a\u003e on kaggle.\u003c/p\u003e\n\u003cp\u003eAs written on kaggle -\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;This is the legendary Titanic ML competition – the best, first challenge for you to dive into ML competitions and familiarize yourself with how the Kaggle platform works. The competition is simple: use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.\u0026rdquo;\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFirst, we need to load the dataset:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pd\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread_csv(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;data/train.csv\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehead()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\u003cpre\u003e\u003ccode\u003e.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/style\u003e\u003c/p\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003ePassengerId\u003c/th\u003e\n      \u003cth\u003eSurvived\u003c/th\u003e\n      \u003cth\u003ePclass\u003c/th\u003e\n      \u003cth\u003eName\u003c/th\u003e\n      \u003cth\u003eSex\u003c/th\u003e\n      \u003cth\u003eAge\u003c/th\u003e\n      \u003cth\u003eSibSp\u003c/th\u003e\n      \u003cth\u003eParch\u003c/th\u003e\n      \u003cth\u003eTicket\u003c/th\u003e\n      \u003cth\u003eFare\u003c/th\u003e\n      \u003cth\u003eCabin\u003c/th\u003e\n      \u003cth\u003eEmbarked\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003eBraund, Mr. Owen Harris\u003c/td\u003e\n      \u003ctd\u003emale\u003c/td\u003e\n      \u003ctd\u003e22.0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003eA/5 21171\u003c/td\u003e\n      \u003ctd\u003e7.2500\u003c/td\u003e\n      \u003ctd\u003eNaN\u003c/td\u003e\n      \u003ctd\u003eS\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003eCumings, Mrs. John Bradley (Florence Briggs Th...\u003c/td\u003e\n      \u003ctd\u003efemale\u003c/td\u003e\n      \u003ctd\u003e38.0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003ePC 17599\u003c/td\u003e\n      \u003ctd\u003e71.2833\u003c/td\u003e\n      \u003ctd\u003eC85\u003c/td\u003e\n      \u003ctd\u003eC\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003eHeikkinen, Miss. Laina\u003c/td\u003e\n      \u003ctd\u003efemale\u003c/td\u003e\n      \u003ctd\u003e26.0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003eSTON/O2. 3101282\u003c/td\u003e\n      \u003ctd\u003e7.9250\u003c/td\u003e\n      \u003ctd\u003eNaN\u003c/td\u003e\n      \u003ctd\u003eS\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e4\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003eFutrelle, Mrs. Jacques Heath (Lily May Peel)\u003c/td\u003e\n      \u003ctd\u003efemale\u003c/td\u003e\n      \u003ctd\u003e35.0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e113803\u003c/td\u003e\n      \u003ctd\u003e53.1000\u003c/td\u003e\n      \u003ctd\u003eC123\u003c/td\u003e\n      \u003ctd\u003eS\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e5\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003eAllen, Mr. William Henry\u003c/td\u003e\n      \u003ctd\u003emale\u003c/td\u003e\n      \u003ctd\u003e35.0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e373450\u003c/td\u003e\n      \u003ctd\u003e8.0500\u003c/td\u003e\n      \u003ctd\u003eNaN\u003c/td\u003e\n      \u003ctd\u003eS\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003cp\u003eSo before using eazypredict, we need to pre-process the dataset. This includes the following steps -\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRemoving null values\u003c/li\u003e\n\u003cli\u003eEncoding categorical data\u003c/li\u003e\n\u003cli\u003eScaling the dataset\u003c/li\u003e\n\u003cli\u003eSplitting the training and testing data\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Removes null values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Age\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efillna(method\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bfill\u0026#34;\u003c/span\u003e, inplace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cabin\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efillna(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;No Room\u0026#34;\u003c/span\u003e, inplace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Embarked\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efillna(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;S\u0026#34;\u003c/span\u003e, inplace\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Encodes categorical data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eord_enc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e OrdinalEncoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sex_code\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ord_enc\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit_transform(df[[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sex\u0026#34;\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cabin_code\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ord_enc\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit_transform(df[[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cabin\u0026#34;\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Embarked_code\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ord_enc\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit_transform(df[[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Embarked\u0026#34;\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Selects features for X and labels for y\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX_feat \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Pclass\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Age\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SibSp\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Parch\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Fare\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sex_code\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cabin_code\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Embarked_code\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_feat \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Survived\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df[X_feat]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e df[y_feat]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Scaling the features\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escaler \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e RobustScaler()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX_norm \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pd\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame(scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit_transform(X), columns\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eX\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Splitting into train, set \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX_train, X_test, y_train, y_test \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e train_test_split(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    X_norm, y, test_size\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.33\u003c/span\u003e, random_state\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX_norm\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehead()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\u003cpre\u003e\u003ccode\u003e.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/style\u003e\u003c/p\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003ePclass\u003c/th\u003e\n      \u003cth\u003eAge\u003c/th\u003e\n      \u003cth\u003eSibSp\u003c/th\u003e\n      \u003cth\u003eParch\u003c/th\u003e\n      \u003cth\u003eFare\u003c/th\u003e\n      \u003cth\u003eSex_code\u003c/th\u003e\n      \u003cth\u003eCabin_code\u003c/th\u003e\n      \u003cth\u003eEmbarked_code\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e-0.388889\u003c/td\u003e\n      \u003ctd\u003e1.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e-0.312011\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e-2.0\u003c/td\u003e\n      \u003ctd\u003e0.500000\u003c/td\u003e\n      \u003ctd\u003e1.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e2.461242\u003c/td\u003e\n      \u003ctd\u003e-1.0\u003c/td\u003e\n      \u003ctd\u003e-65.0\u003c/td\u003e\n      \u003ctd\u003e-2.0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e-0.166667\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e-0.282777\u003c/td\u003e\n      \u003ctd\u003e-1.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e-2.0\u003c/td\u003e\n      \u003ctd\u003e0.333333\u003c/td\u003e\n      \u003ctd\u003e1.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e1.673732\u003c/td\u003e\n      \u003ctd\u003e-1.0\u003c/td\u003e\n      \u003ctd\u003e-91.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e0.333333\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e-0.277363\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n      \u003ctd\u003e0.0\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003cp\u003eNow we can use eazypredict module to quicly get the predictions of the top classification algorithms.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eclf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e EazyClassifier()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel_list, prediction_list, model_results \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e clf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit(X_train, X_test, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                                     y_train, y_test)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel_results\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e100%|██████████| 10/10 [00:00\u0026lt;00:00, 10.09it/s]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\u003cpre\u003e\u003ccode\u003e.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/style\u003e\u003c/p\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eAccuracy\u003c/th\u003e\n      \u003cth\u003ef1 score\u003c/th\u003e\n      \u003cth\u003eROC AUC score\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003eGaussianNB\u003c/th\u003e\n      \u003ctd\u003e0.803390\u003c/td\u003e\n      \u003ctd\u003e0.803637\u003c/td\u003e\n      \u003ctd\u003e0.797619\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMLPClassifier\u003c/th\u003e\n      \u003ctd\u003e0.803390\u003c/td\u003e\n      \u003ctd\u003e0.800228\u003c/td\u003e\n      \u003ctd\u003e0.784524\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eRandomForestClassifier\u003c/th\u003e\n      \u003ctd\u003e0.800000\u003c/td\u003e\n      \u003ctd\u003e0.798956\u003c/td\u003e\n      \u003ctd\u003e0.788214\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eLGBMClassifier\u003c/th\u003e\n      \u003ctd\u003e0.800000\u003c/td\u003e\n      \u003ctd\u003e0.798244\u003c/td\u003e\n      \u003ctd\u003e0.785595\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eRidgeClassifier\u003c/th\u003e\n      \u003ctd\u003e0.796610\u003c/td\u003e\n      \u003ctd\u003e0.794629\u003c/td\u003e\n      \u003ctd\u003e0.781429\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eXGBClassifier\u003c/th\u003e\n      \u003ctd\u003e0.779661\u003c/td\u003e\n      \u003ctd\u003e0.779203\u003c/td\u003e\n      \u003ctd\u003e0.769762\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eDecisionTreeClassifier\u003c/th\u003e\n      \u003ctd\u003e0.779661\u003c/td\u003e\n      \u003ctd\u003e0.778869\u003c/td\u003e\n      \u003ctd\u003e0.768452\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eKNeighborsClassifier\u003c/th\u003e\n      \u003ctd\u003e0.769492\u003c/td\u003e\n      \u003ctd\u003e0.766785\u003c/td\u003e\n      \u003ctd\u003e0.752024\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eSVC\u003c/th\u003e\n      \u003ctd\u003e0.688136\u003c/td\u003e\n      \u003ctd\u003e0.662186\u003c/td\u003e\n      \u003ctd\u003e0.640238\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eSGDClassifier\u003c/th\u003e\n      \u003ctd\u003e0.681356\u003c/td\u003e\n      \u003ctd\u003e0.669167\u003c/td\u003e\n      \u003ctd\u003e0.647619\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003cp\u003eAfter this you have the ability to select any model and perform hyperparameter tuning on it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egaussian_clf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e model_list[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GaussianNB\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e GridSearchCV\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eparams_NB \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;var_smoothing\u0026#34;\u003c/span\u003e: np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elogspace(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e, num\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egs_NB \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e GridSearchCV(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    estimator\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003egaussian_clf, param_grid\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eparams_NB, verbose\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, scoring\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;accuracy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egs_NB\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit(X_train, y_train\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evalues\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eravel())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egs_NB\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ebest_params_\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003eFitting 5 folds for each of 100 candidates, totalling 500 fits\n\n{'var_smoothing': 8.111308307896873e-06}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"using-it-for-regression\"\u003eUsing it for regression\u003c/h2\u003e\n\u003cp\u003eIt can be used for regression in pretty much the same way as above. You just need to import the EazyRegressor estimator.\u003c/p\u003e\n\u003cp\u003eMore details can be found \u003ca href=\"https://github.com/codevardhan/EazyPredict/tree/main#for-regression\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"creating-an-ensemble-model\"\u003eCreating an ensemble model\u003c/h2\u003e\n\u003cp\u003eThis is the most effective feature of this library as an ensemble model can create a really good model with minimal effort in hyper parameter tuning.\u003c/p\u003e\n\u003cp\u003eAll you need to do is to pass the results and the model names from the previous \u0026ldquo;fit\u0026rdquo; step to the next one.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eclf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e EazyClassifier()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel_list, prediction_list, model_results \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e clf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit(X_train, X_test, y_train, y_test)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eensemble_reg, ensemble_results \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e clf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efitVotingEnsemble(model_list, model_results)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eensemble_results\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e100%|██████████| 10/10 [00:01\u0026lt;00:00,  6.68it/s]\u003c/p\u003e\n\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\u003cpre\u003e\u003ccode\u003e.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/style\u003e\u003c/p\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eModels\u003c/th\u003e\n      \u003cth\u003eAccuracy\u003c/th\u003e\n      \u003cth\u003eF1 score\u003c/th\u003e\n      \u003cth\u003eROC AUC score\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003eGaussianNB LGBMClassifier RidgeClassifier MLPC...\u003c/td\u003e\n      \u003ctd\u003e0.816949\u003c/td\u003e\n      \u003ctd\u003e0.758929\u003c/td\u003e\n      \u003ctd\u003e0.799881\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn conclusion, \u0026lsquo;EazyPredict\u0026rsquo; is an efficient and user-friendly Python module that makes trying out multiple prediction algorithms a breeze. Its memory-efficient design and customizable options make it a valuable tool for any data scientist or machine learning enthusiast. I hope you enjoy using \u0026lsquo;EazyPredict\u0026rsquo; as much as I enjoyed creating it.\u003c/p\u003e\n\u003cp\u003eCheck out the entire project on \u003ca href=\"https://github.com/codevardhan/EazyPredict\"\u003eGithub\u003c/a\u003e or \u003ca href=\"https://pypi.org/project/eazypredict/\"\u003ePyPI\u003c/a\u003e.\u003c/p\u003e\n","description":null,"image":"/images/eazypredict/featured.png","permalink":"https://codevardhan.github.io/projects/2023-02-03-eazypredict-module/","title":"EazyPredict ML module"},{"content":"\u003cp\u003eThe aim of this blog is to guide individuals in comprehending the methodology and tactics required to construct a web scraper.\u003c/p\u003e\n\u003ch2 id=\"the-problem-with-low-resource-languages-for-nlp\"\u003eThe problem with low resource languages for NLP\u003c/h2\u003e\n\u003cp\u003eWhen getting started with an NLP project, the initial bottleneck is always acquiring relevant data. This issue is magnified when trying to work on an NLP project for Indian languages. Some of the challenges associated with building an NLP project for languages with a low digital presence are as follows.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAbsence of Data: The absence of adequate data is the first problem. Digital text and audio data are frequently absent from low resource languages, making it difficult to train NLP algorithms. This reduces the amount of data that may be used for NLP system training, testing, and assessment.\u003c/li\u003e\n\u003cli\u003eLack of Pre-Trained Models: The absence of pre-trained models makes it more difficult to begin developing new models. Pre-trained models, which are often developed using enormous amounts of data, serve as a foundation for developing new models. Yet, such models might not exist or be too small for low resource languages to make a major impact.\u003c/li\u003e\n\u003cli\u003eLanguage Complexity: Languages with limited resources are frequently more complex than their counterparts with abundant resources. They could lack standards in terms of spelling, grammar, or vocabulary, or they might have complex morphology or syntax.\u003c/li\u003e\n\u003cli\u003eThe restricted availability of linguistic resources, including dictionaries, grammars, and instruments for part-of-speech tagging and parsing, among other things, is another major issue. These tools are essential for developing NLP systems.\nCode-Mixing and Multilingualism: Low resource languages are often spoken in multilingual environments, leading to code-mixing or borrowing from other languages. This makes it challenging to develop models that can accurately capture the unique features of the language.\u003c/li\u003e\n\u003cli\u003eLack of Expertise: It takes specialist knowledge and experience to develop NLP solutions for languages with limited resources. This includes expertise in data science, computer learning, and languages. The availability of such knowledge, however, may be constrained, particularly in areas where the language is not frequently spoken or recognised.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhile this is pretty depressing, we can start fixing it one line of code at a time :).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/nlp_scraper/imfine.gif\" alt=\"image of the best meme\"\u003e\u003c/p\u003e\n\u003ch2 id=\"choosing-data-sources\"\u003eChoosing data sources\u003c/h2\u003e\n\u003cp\u003eI’ve decided to focus on getting more data for Indian languages. More specifically I am focusing on Malayalam, which is my native language. The largest monolingual dataset that I have found for malayalam is the common \u003ca href=\"https://commoncrawl.org/the-data/get-started/\"\u003ecrawl dataset\u003c/a\u003e. This might not be suitable for smaller projects as it is a collection of monthly scrapes of all internet data, in multiple languages.\u003c/p\u003e\n\u003cp\u003eSo I decided to search for a smaller target, which led me to this \u003ca href=\"https://www.oneindia.com/archives\"\u003ewebsite\u003c/a\u003e. This was a news website with a seperate section for archived data.This was a dream come true for a data nerd like me. All of this good, juicy data was just sitting there for the taking.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/nlp_scraper/guy-meme.jpg\" alt=\"guy looking meme\"\u003e\u003c/p\u003e\n\u003cp\u003eThey had news articles saved all the way back to the year 2000!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/nlp_scraper/fig1.png\" alt=\"Screenshot of the website\"\u003e\u003c/p\u003e\n\u003ch2 id=\"lets-get-scraping\"\u003eLets get scraping\u003c/h2\u003e\n\u003cp\u003eThe first step in scraping any website is to analyze the structure of the website and what kind of data you would like to extract from it. We will be using beautiful soup, and use it to parse html files.\u003c/p\u003e\n\u003cp\u003eInstall bs4 using pip\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epip install beautifulsoup4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor this particular website, there was archived news data for 8 different languages. Each of their websites had urls similar to “https://\u0026lt;language\u0026gt;.oneindia.com/archives/” where \u0026ldquo;\u0026lt;language\u0026gt;\u0026rdquo; was replaced appropriately with one of the 8 languages.\u003c/p\u003e\n\u003cp\u003eThe archives itself was built like a calendar widget, where you could select a date and view the news for that particular date.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/nlp_scraper/fig2.png\" alt=\"Screenshot of the year view of website\"\u003e\n\u003cimg src=\"/images/nlp_scraper/fig3.png\" alt=\"Screenshot of the month view of website\"\u003e\u003c/p\u003e\n\u003cp\u003eNotice the changes in the url when we get to the day view. The url “https://malayalam.oneindia.com/2004/01/01/” displays the archived malayalam news data for January 1st 2007. This honestly makes our job so much easier as all we really have to do is loop through all the date combinations from 2000/05/01 to the current date. So our scraping function begins to look like this.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget_data\u003c/span\u003e(url, lang, save_dir):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    url \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e url\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;language\u0026#34;\u003c/span\u003e, lang)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    end_date \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e date\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etoday()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    start_date \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e date(\u003cspan style=\"color:#ae81ff\"\u003e2000\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e single_date \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e daterange(start_date, end_date):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        url_end \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e single_date\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrftime(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        page_url \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e url \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e url_end\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#75715e\"\u003e# scrape data from page_url and return it\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eget_data(url, args\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elang, args\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esave_dir)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe next step is to find the url information of each news article in the list. We can use this to navigate to each article and then finally get our data.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/nlp_scraper/fig4.png\" alt=\"Screenshot of the dev tools in browser\"\u003e\u003c/p\u003e\n\u003cp\u003eThe built-in tools of our browser can help us in achieving this goal. Open developer tools to get a view of the html code displayed by the browser. Then using the inspect element tool, click on the news article. This highlights the code snippet relevant to the url.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epage_html \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e requests\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget(page_url)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econtent\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emain_soup \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e BeautifulSoup(page_html, features\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;html5lib\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e elem \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e main_soup\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efindAll(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ul\u0026#34;\u003c/span\u003e, attrs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;class\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dayindexTitles\u0026#34;\u003c/span\u003e}):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  news_url \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e url \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e elem\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ea\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eattrs[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;href\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOur initial step involves invoking an HTML request to the previously acquired URL. The resultant HTML content is subsequently passed to the BeautifulSoup wrapper, which utilizes the \u0026lsquo;html5lib\u0026rsquo; parser to construct a representation of the Document Object Model (DOM) of the page.\u003c/p\u003e\n\u003cp\u003eThen we use the findAll function of beautifulSoup to find all ul elements with the class value of “dayIndexTitles”. The url can be accessed through the link element, with the href attribute.\u003c/p\u003e\n\u003cp\u003eFinally to extract the main data, analyze the final page again.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/nlp_scraper/fig5.png\" alt=\"Screenshot of the dev tools in browser 2\"\u003e\u003c/p\u003e\n\u003cp\u003eThe main data is in the \u0026lt;p\u0026gt; tags of the article. So we can utilize the following code to extract the necessary information and save them to a local file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enews_html \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e requests\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget(news_url)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econtent\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enews_soup \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e BeautifulSoup(news_html, features\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;html5lib\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e elem \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e news_soup\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efindAll(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;p\u0026#34;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   doc_data \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e str(elem)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   data\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(doc_data)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFinally put together the whole thing together and create a function as follows.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget_data\u003c/span\u003e(url, lang, save_dir):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    url \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e url\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;language\u0026#34;\u003c/span\u003e, lang)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    end_date \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e date\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etoday()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    start_date \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e date(\u003cspan style=\"color:#ae81ff\"\u003e2000\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e single_date \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e daterange(start_date, end_date):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        url_end \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e single_date\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrftime(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        page_url \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e url \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e url_end\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e elem \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e main_soup\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efindAll(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ul\u0026#34;\u003c/span\u003e, attrs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;class\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dayindexTitles\u0026#34;\u003c/span\u003e}):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e elem\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ea:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  doc_data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  news_url \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e url \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e elem\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ea\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eattrs[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;href\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  news_soup \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e BeautifulSoup(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                      requests\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget(news_url, headers\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eheader)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econtent, features\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;html5lib\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e elem \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e news_soup\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efindAll(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;p\u0026#34;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                      doc_data \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e str(elem)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereplace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  data\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(doc_data)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eTherefore our code is capable of extracting data from this website. The entire project code is available on \u003ca href=\"https://github.com/codevardhan/simple-indic-languages-scraper\"\u003eGitHub\u003c/a\u003e. In the entire project, I have added some sanity checks and extended the functionality to a CLI, but the base logic of the scraping part remains the same.\u003c/p\u003e\n","description":null,"image":"/images/nlp_scraper/featured.png","permalink":"https://codevardhan.github.io/projects/2022-07-21-malayalam-scraper/","title":"Developing a scraper to get NLP data using Beautiful Soup and python!"},{"content":"\u003cp\u003eIn this blog we go through the kNN algorithm logic, implement it from scratch in python and apply it on the MNIST digit dataset\u003c/p\u003e\n\u003ch3 id=\"prerequisites\"\u003ePrerequisites\u003c/h3\u003e\n\u003cp\u003emachine learning, supervised vs unsupervised ML, classification vs regression\u003c/p\u003e\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eThe K Nearest Neighbour classification is a simple and efficient machine learning model that can used for classification. While there are more complex classification models, if establishing a model with some training dataset is proving troublesome, it is likely that a kNN algorithm will provide the best solution. kNN is considered to be one of the top 10 data mining algorithms for this reason.\u003c/p\u003e\n\u003cp\u003ekNN is not a model based classifier, instead it is called a lazy learner, as it performs classification tasks without building its model. In other words, the model does not have a “training” phase like other common machine learning models. The reasons for this will become apparent after I explain the model with an example.\u003c/p\u003e\n\u003cp\u003eThis algorithm works on the concept of “similarity” between data points. This can easily be visualized by using a 2 dimensional dataset.\u003c/p\u003e\n\u003ch3 id=\"explanation-with-dummy-data\"\u003eExplanation with dummy data\u003c/h3\u003e\n\u003cp\u003eLet’s say we wish to create a machine learning model that knows how to classify images of cats and dogs. For any ML model, we must have some data that highlights the different characteristics of both animals. Let us create this dataset ourselves, that would be pretty fun! The two characteristics that we choose could be as follows -\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe sharpness of its claws\u003c/li\u003e\n\u003cli\u003eThe length of its ears\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eUsing these two features, we can end up with a model that has a reasonable accuracy. First, lets build a dataset for the problem. I’ll be doing this by measuring 4 legged mammals in my area ;). brb!\u003c/p\u003e\n\u003cp\u003eDisclaimer - No animals were harmed in the creation of this blog\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s say the data I have is as follows -\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eAnimal\u003c/th\u003e\n\u003cth\u003eSharpness of its claws (cm)\u003c/th\u003e\n\u003cth\u003eLength of its ears (cm)\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCat\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCat\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCat\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDog\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDog\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDog\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis data is classified into two classes, cat and dog.\nThe data consists of two columns, the first one is called the label column. This identifies which class a data point is supposed to be in, and the second column is our features column.\u003c/p\u003e\n\u003cp\u003ePlotting them results in a graph as shown below. Notice how similar animals are grouped “together” in the plot? This property is what kNN uses to perform classification.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/knn_scratch//images1.png\" alt=\"image of a graph showing the data I described\"\u003e\u003c/p\u003e\n\u003cp\u003eNow that we have our training data, let’s introduce a new unknown animal with the features (2.5, 4). Our model needs to able to determine if the unknown animal is a cat or a dog i.e. which class it belongs to. (Spoiler alert: it’s a cat! But our model doesn’t know that :p)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/knn_scratch//images2.png\" alt=\"image of a graph showing the data I described with an unknown quantity\"\u003e\u003c/p\u003e\n\u003cp\u003eThe nearest neighbour algorithm finds the data point that is “closest” to our unknown point. The way we measure this “closeness” can be through common methods, like euclidean or cosine distance. Here, I will be using the euclidean distance equation for the demonstration.\u003c/p\u003e\n\u003cp\u003e$$\nd(p,q) = sqrt{\\sum_{i=1}^n (q_i - p_i)^2}\n$$\u003c/p\u003e\n\u003cp\u003eBy calculating the Euclidean distance between our unknown point and all the other points, we identify that the point (2,4) is the closest. This particular point corresponds to a cat, leading the nearest neighbor algorithm to conclude that our unknown point is also a cat. However, it\u0026rsquo;s important to recognize that this approach is highly vulnerable to overfitting. To put it simply, if our data contains a few outliers, the accuracy of the model\u0026rsquo;s predictions can be compromised. In our specific scenario, even if the unknown data point is closer to the cluster of cat data points, if the closest point happens to be that of a dog, the model will incorrectly classify the unknown point as a dog.\u003c/p\u003e\n\u003cp\u003eTo address this concern, we employ the K Nearest Neighbor (KNN) algorithm, which is the focal point of this article. Here, instead of identifying a single closest point, we determine K points that are sorted based on their distance to the unknown point, arranged in ascending order. Among these K points, we observe which class value appears most frequently, and that becomes the predicted class for the unknown point. By considering multiple neighbors rather than just one, the KNN algorithm enhances the accuracy and robustness of our predictions.\u003c/p\u003e\n\u003cp\u003eConsider K=3 as an example. In the graph below, the green circle encompasses the points within it. Notably, there are 2 points belonging to the \u0026ldquo;Cat\u0026rdquo; class and 1 point belonging to the \u0026ldquo;Dog\u0026rdquo; class. By applying the k-nearest neighbors (kNN) model, we correctly predict that the unknown animal is a cat. The green circle in this context is commonly known as the \u0026ldquo;decision boundary.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/knn_scratch//images3.png\" alt=\"image of a graph showing the included points\"\u003e\u003c/p\u003e\n\u003cp\u003eThe functioning of the kNN model on a simplistic dataset illustrates its mechanics. However, it is essential to recognize that real-world machine learning problems typically involve more complex datasets. Nonetheless, this example serves as a valuable tool for developing our understanding and intuition about how the model operates.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003ch3 id=\"coding-knn-model-from-scratch\"\u003eCoding kNN model from scratch\u003c/h3\u003e\n\u003cp\u003eNow let’s create this model from scratch in python. Since it is a lazy learning algortihm, we do not need a training phase. We just need the training data and an unlabelled instance for prediction. So the algorithm needs features, labels, and the data instance to be predicted as an input. We\u0026rsquo;ll choose an arbitrary value of K for this example.\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e We also need a helper function to calculate the euclidean distance between two vectors.\u003c/p\u003e\n\u003c!-- \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/codevardhan/67ce27ad2bf0da958ce517e2dab7a30b.js?file=knn_model.py\"\u003e\u003c/script\u003e\n --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# returns the euclidean distance between two vectors\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eeuclidean_distance\u003c/span\u003e(vec1, vec2):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    distance\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(len(vec1)):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        distance\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e(vec1[i]\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003evec2[i])\u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e math\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esqrt(distance)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eknn_function\u003c/span\u003e(X_train, y_train, test_vector, k):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    distance\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# loops through the training dataset, stores the training vector and\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# corresponding label in a variable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e idx \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(len(X_train)):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        img\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eX_train[idx]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        label\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ey_train[idx]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# appends a tuple containing euclidean distance and label of the\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        corresponding training vector\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        distance\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend((euclidean_distance(img, test_vector), label))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#75715e\"\u003e# sorts the tuples in the list in descending order, according to the\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#75715e\"\u003e# euclidean distance\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sorted_dist\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003esorted(distance, key\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003elambda\u003c/span\u003e dist:dist[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# takes the first k values in the list i.e the k nearest neighbours\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    neighbours\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003enp\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray(sorted_dist[:k])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e neighbours\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eThat\u0026rsquo;s the whole code! It really is a pretty simple learning algorithm. Now all we need a wrapper function to accept the input and return the prediction to the user.\u003c/p\u003e\n\u003c!-- {% gist 67ce27ad2bf0da958ce517e2dab7a30b predict_class.py %} --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# this returns the predicted label i.e. the label that occurs the most\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epredict_class\u003c/span\u003e(test_vector, k\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    neighbours\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eknn_function(X_train, y_train, test_vector, k)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    labels, counts \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunique(neighbours[:,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], return_counts\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e labels[counts\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargmax()]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003ePlease not that our implementation is not very optimized and really should be only used to learn how the model works. \u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003ch3 id=\"applying-the-model-on-a-standard-dataset\"\u003eApplying the model on a standard dataset\u003c/h3\u003e\n\u003cp\u003eAs written on kaggle -\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;MNIST (\u0026ldquo;Modified National Institute of Standards and Technology\u0026rdquo;) is the de facto “hello world” dataset of computer vision. Since its release in 1999, this classic dataset of handwritten images has served as the basis for benchmarking classification algorithms. As new machine learning techniques emerge, MNIST remains a reliable resource for researchers and learners alike.\u0026rdquo;\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSo it\u0026rsquo;s a pretty standard dataset! Let\u0026rsquo;s use this to evaluate our model\u0026rsquo;s performance! First let\u0026rsquo;s get the dataset from \u003ca href=\"https://www.kaggle.com/c/digit-recognizer\"\u003ekaggle\u003c/a\u003e and read it using pandas!\u003c/p\u003e\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/codevardhan/67ce27ad2bf0da958ce517e2dab7a30b.js?file=data.ipynb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eThe shape of this data is (60000, 785). This means that each row is a vector containing a digit representation. That comes out to a total of 60000 images in the training dataset. The digit is represented as a 1x784 vector. So then why is the shape 785? This is because the last column is a label that stores what digit is represented by that particular row.\u003c/p\u003e\n\u003cp\u003eThen we use numpy to store the data into train, test datasets.\u003c/p\u003e\n\u003c!-- \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/codevardhan/67ce27ad2bf0da958ce517e2dab7a30b.js?file=read_data.py\"\u003e\u003c/script\u003e\n --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# split into features and labels\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX_train \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray(train_data[train_data\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edrop(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;label\u0026#39;\u003c/span\u003e)])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_train \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray(train_data[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;label\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX_test \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray(test_data[test_data\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolumns\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edrop(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;label\u0026#39;\u003c/span\u003e)])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_test \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray(test_data[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;label\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# shuffle the data randomly\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erand_idx \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epermutation(X_train\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX_train \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e X_train[rand_idx]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_train \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e y_train[rand_idx]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eNow let\u0026rsquo;s see what an image from this dataset looks like, and print the label.\u003c/p\u003e\n\u003c!-- \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/codevardhan/67ce27ad2bf0da958ce517e2dab7a30b.js?file=visualize.py\"\u003e\u003c/script\u003e\n --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimg\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eX_test[\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimg \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e img\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereshape(\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eimshow(img, cmap\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ematplotlib\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecm\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ebinary)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eaxis(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;off\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshow()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(y_test[\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimg\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eOUTPUT:\n1.0\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"//images/knn_scratch/visualized_img.png\" alt=\"image of a digit\"\u003e\u003c/p\u003e\n\u003cp\u003eThat looks pretty good! This means that the 31st vector stored in out test dataset corresponds to this image of the digit \u0026lsquo;1\u0026rsquo;. So now we have confirmed that the data is indeed stored and labelled properly. It\u0026rsquo;s time to unleash our kNN model on this dataset! Let us try to predict the result we get for the same test input. If everything goes well, we should get \u0026lsquo;1\u0026rsquo; as the predicted output.\u003c/p\u003e\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/codevardhan/67ce27ad2bf0da958ce517e2dab7a30b.js?file=predict.ipynb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eAnd we do! Our predict function predicted correctly that the image shown was that of a 1. Here also, the k value that we passed to the function was completely arbitrary. Now let\u0026rsquo;s properly evaluate the model on the entire test set.\u003c/p\u003e\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/codevardhan/67ce27ad2bf0da958ce517e2dab7a30b.js?file=accuracy.ipynb\"\u003e\u003c/script\u003e\n\n\u003cp\u003eThe accuracy comes out to about 90%. Now I should say that this accuracy can be improved by selecting a better value of k, but it\u0026rsquo;s not bad for a model without any hyperparameter tuning.\u003c/p\u003e\n\u003ch4 id=\"footnotes\"\u003eFootnotes\u003c/h4\u003e\n\u003csection class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\" role=\"doc-endnote\"\u003e\n\u003cp\u003eYou could extend the same principles to higher dimensions. Here we have 2 features, so we only have to visualize 2 dimensions. But for most problems, it\u0026rsquo;s common for there to be a lot of dimensions, millions even. It’s difficult to imagine problems in a higher dimension, so working on them in lower dimensions while learning is a good idea! Quick detour on this topic \u003ca href=\"http://www.ams.org/notices/200210/comm-morin.pdf\"\u003ehere\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:2\" role=\"doc-endnote\"\u003e\n\u003cp\u003eIt should be noted that there does exist algorithms for choosing an ideal value of K based on the training dataset. You can learn more \u003ca href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4916348/\"\u003ehere\u003c/a\u003e.\u0026#160;\u003ca href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:3\" role=\"doc-endnote\"\u003e\n\u003cp\u003eOptimizations can be made to the algorithm such that some of the computation can be skipped, but this discussion is out of the scope of this article. Feel free to read up on it \u003ca href=\"https://www.sciencedirect.com/science/article/pii/S1877050918301376\"\u003ehere\u003c/a\u003e\u0026#160;\u003ca href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/section\u003e\n","description":null,"image":"/images/knn_scratch/visualized_img.png","permalink":"https://codevardhan.github.io/posts/2022-01-30-knn-algorithm-demystified/","title":"kNN algorithm explained intuitively!"},{"content":"\u003ch1 id=\"chrome-extension-to-monitor-mental-health\"\u003eChrome Extension To Monitor Mental Health\u003c/h1\u003e\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eThis project was a really interesting one that I was fortunate enough to be a part of! We made as an entry project to compete in a hackathon organised by HackOn. We did not win the hackathon, but we did create a unique and interesting project. (imo)\u003c/p\u003e\n\u003cp\u003eOur project aims to monitor a user\u0026rsquo;s search patterns and use this information to inform their close/loved ones about potential mental health problems the user might be facing. A recent study showed that most people who are mentally depressed in some form have used the internet in a manner that has worsened their illness. So our goal with this approach is to help in the monitoring of ‘at-risk’ individuals and prevent them from becoming their own worst enemy.\u003c/p\u003e\n\u003cp\u003eWe aim to achieve this goal through a chrome extension that tracks the search phrases entered by the user and sends them to a deep learning model, that determines whether the user shows signs of depression or not!\u003c/p\u003e\n\u003ch3 id=\"thought-process-behind-the-project\"\u003eThought Process Behind the Project\u003c/h3\u003e\n\u003cp\u003eThe motivation behind this project is highly personal. We all have a friend who had to go through some dark times in some periods of their lives. Some were able to overcome this, while some were not so fortunate. One thing that we all can agree on is that there are not many support systems that help or support people in such cases. Our extension is aimed to help not only the fighters but also their supporters who want to help more. We know someone who went through such a phase, and something that was missing was a medium to alert close ones when to intervene, as you can never expect someone to know everything you are going through.\u003c/p\u003e\n\u003ch3 id=\"making-the-machine-learning-model\"\u003eMaking the machine learning model\u003c/h3\u003e\n\u003cp\u003eI was in charge of making the machine learning model that would be used by us for the web extension. I used common NLP methods such as preprocessing, tokenizing, encoding. The pre-processing was done by making a function of its own.\u003c/p\u003e\n\u003ch4 id=\"dataset\"\u003eDataset\u003c/h4\u003e\n\u003cp\u003eWe used two different datasets for this model. The problem is a classification question that has to decide whether a person is depressed (true state) or not depressed (false state). I used 2 datasets to train the true and false state.\u003c/p\u003e\n\u003cp\u003eThe first \u003ca href=\"https://www.kaggle.com/nikhileswarkomati/suicide-watch\"\u003edataset\u003c/a\u003e is from kaggle. It is a collection of posts from \u0026ldquo;SuicideWatch\u0026rdquo; and \u0026ldquo;depression\u0026rdquo; subreddits of the Reddit platform. The posts are collected using Pushshift API. All posts that were made to \u0026ldquo;SuicideWatch\u0026rdquo; from Dec 16, 2008 (creation) till Jan 2, 2021, were collected while \u0026ldquo;depression\u0026rdquo; posts were collected from Jan 1, 2009, to Jan 2, 2021. We took the posts that were written by people suffering from depression as the true state.\u003c/p\u003e\n\u003cp\u003eThe second \u003ca href=\"https://www.kaggle.com/kazanova/sentiment140\"\u003edataset\u003c/a\u003e is a sentiment analysis dataset. It contains 1,600,000 tweets extracted using the twitter API. The tweets have been annotated (0 = negative, 2 = neutral, 4 = positive) and they can be used to detect sentiment. We took the dataset that includes neutral and positive flags.\u003c/p\u003e\n\u003cp\u003eI did it this way because the \u0026rsquo;negative\u0026rsquo; statements from the twitter sentiment analysis dataset might be some tweet regarding a hate crime, or an angry tweet. It does not necessarily have to be the words of a person undergoing depression. So I overcame this with the Reddit dataset. Going through the subreddit mentioned, it was clear that most of the posts were regarding depression/existential crisis. Any post swaying from these topics would be quickly taken down by the moderators. So, this was most accurate data we would get that could be used to emulate the psyche of a depressed person.\u003c/p\u003e\n\u003ch4 id=\"pre-proccessing-\"\u003ePre-proccessing-\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTEXT_CLEANING_RE \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@\\S+|https?:\\S+|http?:\\S|[^A-Za-z0-9]+\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epreprocess\u003c/span\u003e(text, stem\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eFalse\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Remove link,user and special characters\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esub(TEXT_CLEANING_RE, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e, str(text)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elower())\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    tokens \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e token \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e text\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e token \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e stop_words:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e stem:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                tokens\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(stemmer\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estem(token))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                tokens\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(token)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(tokens)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI used packages from word2vec and keras text pre-processing for building the vocabulary and tokenizing the data respectively.\u003c/p\u003e\n\u003ch4 id=\"building-vocabulary--\"\u003eBuilding vocabulary -\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eW2V_SIZE \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eW2V_WINDOW \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eW2V_EPOCH \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eW2V_MIN_COUNT \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eKERAS_MODEL \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;model.h5\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWORD2VEC_MODEL \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;model.w2v\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTOKENIZER_MODEL \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tokenizer.pkl\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eENCODER_MODEL \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoder.pkl\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ew2v_model \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e gensim\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emodels\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eword2vec\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eWord2Vec(size\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eW2V_SIZE,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                            window\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eW2V_WINDOW,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                            min_count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eW2V_MIN_COUNT,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                            workers\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ew2v_model\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ebuild_vocab(documents)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ew2v_model\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etrain(documents, total_examples\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003elen(documents), epochs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eW2V_EPOCH)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"tokenizing--\"\u003eTokenizing -\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etokenizer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Tokenizer()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etokenizer\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit_on_texts(df_train\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etext)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evocab_size \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e len(tokenizer\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eword_index) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Total words\u0026#34;\u003c/span\u003e, vocab_size)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen I used LabelEncoder() from sklearn to encode the tokenized text data.\u003c/p\u003e\n\u003ch4 id=\"encoding--\"\u003eEncoding -\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eencoder \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LabelEncoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eencoder\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit(df_train\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etarget\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etolist())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_train \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e encoder\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etransform(df_train\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etarget\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etolist())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_test \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e encoder\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etransform(df_test\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etarget\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etolist())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_train \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e y_train\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereshape(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_test \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e y_test\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereshape(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"making-the-model\"\u003eMaking the model\u003c/h4\u003e\n\u003cp\u003eWe defined the neural network as follow and trained it for about 10 epochs. This resulted in an accuracy of 96%.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Sequential()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(embedding_layer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(Dropout(\u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(LSTM(\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e, dropout\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.2\u003c/span\u003e, recurrent_dropout\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.2\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd(Dense(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;sigmoid\u0026#39;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esummary()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecompile(loss\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;binary_crossentropy\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            optimizer\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;adam\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            metrics\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;accuracy\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/not_blue/model_training.png\" alt=\"plot of training and validation accuracy\"\u003e\u003c/p\u003e\n\u003cp\u003eAfter the training is done, we can predict if a phrase shows signs of depression or not, in the following way -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epredict(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;painless way to die\u0026#34;\u003c/span\u003e, model1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;elapsed_time\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0.1011207103729248\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;label\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;score\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0.8831092119216919\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"making-the-chrome-extension\"\u003eMaking the chrome extension\u003c/h3\u003e\n\u003cp\u003eI was not involved very heavily in this part, but what we did was to design a front end that takes in a users email ID, name and multiple friend\u0026rsquo;s email IDs.\nThe extension is built using javascript and closely interacts with Chrome extensions API. This makes it possible to run on any chromium based browser such as\nopera, edge, etc. The extension gets the search query and sends it as a JSON structure to our API endpoint /predict. This endpoint is where our DL model is hosted.\nThe DL model takes the string as an input and returns a score (from 0-1 ). The higher the score is, the more likely the person is to be depressed. This extension runs\nin the background and updates a score variable based on the averages of multiple search results. If the score variable crosses a particular threshold, an email will be sent\nto the close ones of the user.\u003c/p\u003e\n\u003cp\u003eThat was the method we used to implement this project :). Link to the GitHub repo can be found \u003ca href=\"https://github.com/codevardhan/not-blue-hackon/\"\u003ehere.\u003c/a\u003e\u003c/p\u003e\n","description":null,"image":"/images/not_blue/not_blue_post.png","permalink":"https://codevardhan.github.io/projects/2021-05-31-notblue-chrome-extension/","title":"Chrome Extension To Monitor Mental Health"},{"content":"\u003ch1 id=\"building-a-football-score-updates-api-with-nodejs-and-web-scraping\"\u003eBuilding a Football Score Updates API with Node.js and Web Scraping\u003c/h1\u003e\n\u003ch2 id=\"football-score-updates-api\"\u003eFootball Score Updates API\u003c/h2\u003e\n\u003cp\u003eIn the world of football, staying up to date with the latest match scores and updates is crucial for fans, sports journalists, and developers alike. In this technical blog post, we\u0026rsquo;ll explore how to build a Football Score Updates API using Node.js and web scraping techniques. Our API will fetch real-time match information from the popular Flash Score website, allowing users to access comprehensive data on matches happening in various countries and leagues.\u003c/p\u003e\n\u003ch2 id=\"technologies-used\"\u003eTechnologies Used\u003c/h2\u003e\n\u003cp\u003eTo create our Football Score Updates API, we\u0026rsquo;ll leverage the following technologies:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eNode.js: A powerful JavaScript runtime environment that allows us to build server-side applications.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eExpress: A popular Node.js framework for building web APIs that simplifies routing and request handling.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePuppeteer: A Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"setting-up-the-project\"\u003eSetting Up the Project\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s start by setting up our project:\u003c/p\u003e\n\u003cp\u003eInitialize a new Node.js project by running npm init in your project directory. Follow the prompts to create a package.json file.\u003c/p\u003e\n\u003cp\u003eInstall the required dependencies by running the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm install express cors puppeteer\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCreate an index.js file in your project directory to serve as the entry point for our application.\u003c/p\u003e\n\u003cp\u003eOpen index.js and import the required modules:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexpress\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;express\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecors\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;cors\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInitialize an Express application and set the port:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexpress\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePORT\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprocess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eenv\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePORT\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEnable CORS middleware to handle Cross-Origin Resource Sharing:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003euse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecors\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDefine a route in your Express application to handle the match updates request, and relegate the scraping work to another function to maintain code cleanliness.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/:country/:comp\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003ecountry\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecomp\u003c/span\u003e } \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDataFromCompName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecountry\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecomp\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eStart the server by calling app.listen(PORT, \u0026hellip;):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elisten\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ePORT\u003c/span\u003e, () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`🚀 Server ready at http://localhost:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ePORT\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/`\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow, our Express server is ready to handle incoming requests and fetch match updates using the getDataFromCompName function.\u003c/p\u003e\n\u003ch2 id=\"web-scraping-the-flash-score-website\"\u003eWeb Scraping the Flash Score Website\u003c/h2\u003e\n\u003cp\u003eNext, we\u0026rsquo;ll implement the web scraping logic using Puppeteer to fetch the latest match updates from the Flash Score website.\u003c/p\u003e\n\u003cp\u003eDefine a route in your Express application to handle the match updates request:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/matches\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003ecountry\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eleague\u003c/span\u003e } \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDataFromCompName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecountry\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eleague\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e({ \u003cspan style=\"color:#a6e22e\"\u003ematches\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e500\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e({ \u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;An error occurred\u0026#39;\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eImplement the getDataFromCompName function to perform the web scraping:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDataFromCompName\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecountry\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eleague\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`https://www.flashscore.in/football/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ecountry\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eleague\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebrowser\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epuppeteer\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elaunch\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epage\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebrowser\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003enewPage\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epage\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esetRequestInterception\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003epage\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eon\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;request\u0026#39;\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eresourceType\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;font\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eresourceType\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;image\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eabort\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epage\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003egoto\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e, { \u003cspan style=\"color:#a6e22e\"\u003ewaitUntil\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;networkidle0\u0026#39;\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epage\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eevaluate\u003c/span\u003e(() =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esections\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003equerySelector\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;section.event.event--live.event--summary\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edivs\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Array.\u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esections\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;div\u0026#39;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edivs\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edivs\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#a6e22e\"\u003ematch_info\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003epush\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecurrent\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerText\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esplit\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebrowser\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eparseJSON\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e [];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eImplement the parseJSON function to process the scraped data:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eparseJSON\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ematch_info\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efinal_json\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ematch_info\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;No matches have taken place in the last 24 hours.\u0026#39;\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ematch_info\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003ematch\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efinal_json\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003epush\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMatchInstance\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efinal_json\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDefine the MatchInstance class to represent a single match instance:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMatchInstance\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003econstructor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eteam_1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eteam_1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eteam_2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eteam_2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003escore_1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003escore_1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003escore_2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003escore_2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efh_score\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ematch_info_json\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efh_score\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"testing-the-api\"\u003eTesting the API\u003c/h2\u003e\n\u003cp\u003eStart the Express server by adding the following code to the end of index.js:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprocess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eenv\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePORT\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elisten\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e, () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`Server listening on port \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eport\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRun the API by executing the following command in your terminal:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enode index.js\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOpen your terminal and provide a curl request to \u0026ldquo;http://localhost:3000/matches?country=your_country\u0026amp;league=your_league\u0026rdquo; to retrieve the latest match updates for your desired country and league.\u003c/p\u003e\n\u003cp\u003eYou should receive a JSON response containing the match data.\u003c/p\u003e\n\u003ch2 id=\"customization-and-enhancements\"\u003eCustomization and Enhancements\u003c/h2\u003e\n\u003cp\u003eOur basic Football Score Updates API is now up and running. However, there are several customization and enhancement options you can explore:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdditional Endpoints: Extend the API to provide additional endpoints for accessing team information, player statistics, or historical match data.\u003c/li\u003e\n\u003cli\u003eError Handling: Implement robust error handling to provide clear and meaningful error messages to API consumers.\u003c/li\u003e\n\u003cli\u003eCaching: Introduce a caching mechanism to reduce the number of requests made to the Flash Score website and improve the API\u0026rsquo;s performance.\u003c/li\u003e\n\u003cli\u003eAuthentication: Implement authentication mechanisms, such as API keys or JWT tokens, to secure the API and control access to the match data.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this blog post, we\u0026rsquo;ve explored how to build a Football Score Updates API using Node.js and Puppeteer. By leveraging the power of Express and Puppeteer, we were able to scrape real-time match updates from the Flash Score website and deliver them as JSON responses. This API serves as a foundation for providing football enthusiasts with the latest match information, enabling them to stay connected to the game they love.\u003c/p\u003e\n\u003cp\u003eFeel free to explore further and customize the API according to your specific requirements. Happy coding!\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote: When scraping websites, it\u0026rsquo;s important to be mindful of their terms of service and to respect their usage policies. Always ensure that you\u0026rsquo;re scraping responsibly and within legal and ethical boundaries.\u003c/em\u003e\u003c/p\u003e\n","description":null,"image":"/images/football_api/featured.png","permalink":"https://codevardhan.github.io/projects/2020-07-21-football-api/","title":"Building a Football Score Updates API with Node.js and Web Scraping"},{"content":"\u003ch1 id=\"diy-cell-phone-detector-circuit-stop-unauthorized-mobile-phone-usage\"\u003eDIY Cell Phone Detector Circuit: Stop Unauthorized Mobile Phone Usage\u003c/h1\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eAre you tired of people using their phones when they\u0026rsquo;re not supposed to? Maybe you want to ensure that exam halls, meetings, or other restricted areas remain phone-free. We\u0026rsquo;ve got just the solution for you – a DIY Cell Phone Detector Circuit! In this blog, we\u0026rsquo;ll walk you through the process of building a simple yet effective circuit that can detect the presence of activated cell phones within a one-meter range. It\u0026rsquo;s a fun and educational project that can help you enforce no-phone zones.\u003c/p\u003e\n\u003ch2 id=\"circuit-diagram\"\u003eCircuit Diagram\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/images/cellphone_detector/circuit.png\" alt=\"Circuit diagram\"\u003e\u003c/p\u003e\n\u003ch2 id=\"working-principle-of-cell-phone-detector-circuit\"\u003eWorking Principle of Cell Phone Detector Circuit\u003c/h2\u003e\n\u003cp\u003eThis cell phone detector circuit works by sensing the radio frequency (RF) signals emitted by activated mobile phones. It uses an op-amp as a Frequency Detector or Current to Voltage Converter, and when it detects a phone in operation, it triggers a LED and buzzer to indicate its presence. The circuit consists of various components, including capacitors and transistors, that help in the detection process.\u003c/p\u003e\n\u003ch2 id=\"components-required\"\u003eComponents Required\u003c/h2\u003e\n\u003cp\u003eBefore we dive into building the circuit, let\u0026rsquo;s gather the components you\u0026rsquo;ll need:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOp-Amp CA3130\u003c/li\u003e\n\u003cli\u003e2.2M resistor (2)\u003c/li\u003e\n\u003cli\u003e100K resistor (1)\u003c/li\u003e\n\u003cli\u003e1K resistor (3)\u003c/li\u003e\n\u003cli\u003e100nF capacitor (4)\u003c/li\u003e\n\u003cli\u003e22pF capacitor (2)\u003c/li\u003e\n\u003cli\u003e100uF capacitor\u003c/li\u003e\n\u003cli\u003eBreadboard\u003c/li\u003e\n\u003cli\u003e9 Volt Battery\u003c/li\u003e\n\u003cli\u003eBattery Connector\u003c/li\u003e\n\u003cli\u003eLED\u003c/li\u003e\n\u003cli\u003eTransistor BC547\u003c/li\u003e\n\u003cli\u003eTransistor BC557\u003c/li\u003e\n\u003cli\u003eConnecting wires\u003c/li\u003e\n\u003cli\u003eBuzzer\u003c/li\u003e\n\u003cli\u003eAntenna\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"working-of-cell-phone-detector-circuit\"\u003eWorking of Cell Phone Detector Circuit\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s how the circuit works:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe op-amp is connected as a Frequency Detector or Current to Voltage Converter.\u003c/li\u003e\n\u003cli\u003eTwo 100nF capacitors function as loop antennas to detect RF signals.\u003c/li\u003e\n\u003cli\u003eWhen a call or SMS is transmitted, these capacitors pick up the RF signal, causing fluctuations in the op-amp\u0026rsquo;s output.\u003c/li\u003e\n\u003cli\u003eThe LED, connected through an NPN transistor, blinks according to the signal\u0026rsquo;s frequency.\u003c/li\u003e\n\u003cli\u003eA PNP transistor activates the buzzer, generating a beeping sound while the signal is present.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"advantages-and-disadvantages\"\u003eAdvantages and Disadvantages\u003c/h2\u003e\n\u003cp\u003eBefore you start building the circuit, it\u0026rsquo;s essential to understand its pros and cons:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdvantages\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFast response time.\u003c/li\u003e\n\u003cli\u003eLow overall cost.\u003c/li\u003e\n\u003cli\u003eMinimal power consumption.\u003c/li\u003e\n\u003cli\u003eRequires only a few components.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eDisadvantages\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eLimited detecting radius.\u003c/li\u003e\n\u003cli\u003eCannot detect Bluetooth and 3G network frequencies.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"applications\"\u003eApplications\u003c/h2\u003e\n\u003cp\u003eOnce your cell phone detector circuit is ready, you can use it in various scenarios where mobile phone usage needs to be restricted, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePetrol pumps\u003c/li\u003e\n\u003cli\u003eGas stations\u003c/li\u003e\n\u003cli\u003eHistorical and religious places\u003c/li\u003e\n\u003cli\u003eExamination halls\u003c/li\u003e\n\u003cli\u003eSecurity-sensitive areas like military bases and embassies\u003c/li\u003e\n\u003cli\u003eHospitals\u003c/li\u003e\n\u003cli\u003eTheatres and conference rooms\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eBuilding a cell phone detector circuit is a fun and educational project with practical applications. It allows you to detect unauthorized phone usage within a specific range, making it an excellent choice for enforcing no-phone zones. The circuit\u0026rsquo;s quick response time ensures that even if a phone is on silent mode, you\u0026rsquo;ll know if it\u0026rsquo;s in use. Whenever a cell phone comes within a 1.5-meter range, the LED blinks rapidly, and the buzzer sounds continuously until the signal disappears.\u003c/p\u003e\n\u003cp\u003eSo, if you\u0026rsquo;re looking to prevent unauthorized mobile phone usage in specific areas, gather your components and get ready to build your DIY cell phone detector circuit!\u003c/p\u003e\n","description":null,"image":"/images/cellphone_detector/featured.png","permalink":"https://codevardhan.github.io/posts/2020-06-12-cellphone-detector/","title":"DIY Cell Phone Detector Circuit"},{"content":"\u003ch1 id=\"creating-a-linked-list-in-hack-language-a-nand2tetris-project-breakdown\"\u003eCreating a Linked List in Hack Language: A Nand2Tetris Project Breakdown\u003c/h1\u003e\n\u003cp\u003eIf you\u0026rsquo;re fascinated by the intricacies of computer engineering, then you might have stumbled upon the Nand2Tetris course. This comprehensive program takes you through the journey of building a computer from scratch, delving deep into fundamental concepts like boolean logic, sequential logic, and computer architecture, to name a few. One intriguing aspect is working with the Hack computer, a 16-bit Von Neumann system, and its native Hack language. Today, we\u0026rsquo;re exploring an exciting project from this realm: implementing a linked list using Hack language.\u003c/p\u003e\n\u003ch2 id=\"understanding-linked-lists-and-hack-language\"\u003eUnderstanding Linked Lists and Hack Language\u003c/h2\u003e\n\u003cp\u003eBefore we dive into the project, let\u0026rsquo;s establish what linked lists are. Unlike arrays, linked lists are dynamic data structures, meaning they can easily adapt to data size without extensive memory operations, making them ideal for certain applications.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/nand2tetris_linked_list/linkedlist_figure.png\" alt=\"Structure of a simple linked list\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFig - This diagram represents a basic linked list structure.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe Hack language, integral to Nand2Tetris, operates within this Hack computer environment. Developers write software in this machine language, which the built-in assembler then converts into binary code. Our goal? To implement a linked list in this unique setting.\u003c/p\u003e\n\u003ch2 id=\"breaking-down-the-solution\"\u003eBreaking Down the Solution\u003c/h2\u003e\n\u003cp\u003eOur strategy is straightforward. We handle linked list nodes as register pairs, one for data and the other for the address of the subsequent node. We use two key variables: \u0026lsquo;ptr\u0026rsquo; for the next node\u0026rsquo;s address and \u0026lsquo;data\u0026rsquo; for the node\u0026rsquo;s data. Both are dynamically updated during the program\u0026rsquo;s execution.\u003c/p\u003e\n\u003ch3 id=\"inputting-initial-values\"\u003eInputting Initial Values:\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eFirst Pointer\u003c/strong\u003e: We input the initial pointer value and store it in the \u0026lsquo;ptr\u0026rsquo; variable.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFirst Data Value\u003c/strong\u003e: Similarly, we input the first data value, storing it in the \u0026lsquo;data\u0026rsquo; variable.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNode Initialization\u003c/strong\u003e: The \u0026lsquo;data\u0026rsquo; value is then assigned to the address contained in \u0026lsquo;ptr\u0026rsquo;.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"/images/nand2tetris_linked_list/linkedlist_first.png\" alt=\"Updating the first node\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFig - Here, we\u0026rsquo;re updating the first node with new data.\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"creating-the-linked-list\"\u003eCreating the Linked List:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe program prompts for the next node\u0026rsquo;s address, with these values inputted through a loop for each new node.\u003c/li\u003e\n\u003cli\u003eThe pointer (\u0026lsquo;ptr\u0026rsquo;) is updated with the new address, and if it\u0026rsquo;s null (i.e., pointing to zero), the loop terminates. Otherwise, it continues, prompting for the next data value.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"retrieving-data-from-the-list\"\u003eRetrieving Data from the List:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eWe employ a loop and four variables (\u0026lsquo;i\u0026rsquo; for iterations, \u0026lsquo;search\u0026rsquo; for the list index, \u0026rsquo;temp\u0026rsquo; for the current pointer, and \u0026lsquo;ptr1\u0026rsquo; for the first pointer) to navigate through the linked list.\u003c/li\u003e\n\u003cli\u003eThe program asks for the required index and iterates through the nodes until it finds the correct one. If found, the data value from the specified node is copied to a predetermined register (e.g., the 100th register).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"/images/nand2tetris_linked_list/linkedlist_second.png\" alt=\"Loop Iteration\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFig - The loop is operating in its second iteration.\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"the-code\"\u003eThe Code:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe Hack language code includes input handling, loop operations, node updates, and conditions for terminating the loop or copying data. It\u0026rsquo;s a structured yet low-level approach, highlighting the intricacies of working with machine language.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e@KBD                        //Input first pointer value.\r\nD=M\r\n@48\r\nD=D-A\r\n@ptr          \r\nM=D\r\n\r\n@KBD                         //Input first data value.\r\nD=M\r\n@48\r\nD=D-A\r\n@data\r\nM=D\r\n\r\n@data                        //Assigning data to pointer.\r\nD=M\r\n@ptr\r\nA=M\r\nM=D\r\n\r\n@ptr                         //Storing value of first pointer.\r\nD=M\r\n@ptr1\r\nM=D\r\n\r\n(LOOP)\r\n@KBD                          //Input next pointer.\r\nD=M\r\n@48\r\nD=D-A\r\n\r\n@ptr                          //Updating node with next pointer value.\r\nA=M\r\nA=A+1\r\nM=D\r\n@ptr\r\nM=D\r\n\r\n@END1                         //Checking if pointer is null.\r\nD;JLT\r\n\r\n@KBD                          //Input next data.\r\nD=M\r\n@48\r\nD=D-A\r\n\r\n@data                         //Updating new node with data.\r\nM=D\r\n@ptr\r\nA=M\r\nM=D\r\n\r\n@LOOP                          //Jump to loop\r\n0;JMP\r\n\r\n(END1)\r\n\r\n@i                             //i variable for iteration\r\nM=0\r\n\r\n@KBD                           //Enter the position of data to be found\r\nD=M\r\n@48\r\nD=D-A\r\n@search\r\nM=D\r\n\r\n@COPY1                         //Checks if the position is zero and jumps to function \u0026#39;COPY!\u0026#39; \r\nD;JEQ\r\n\r\n@ptr1                          //Goes to the next pointer location\r\nA=M+1\r\nD=M\r\n\r\n(LOOP2)\r\n@temp                          //Stores the value of the current pointer in the temp variable\r\nM=D\r\n@i\r\nM=M+1\r\nD=M\r\n\r\n@search                        //Checks if the index is equal to ‘i’ and jumps to ‘COPY’ function\r\nD=M-D\r\n@COPY\r\nD;JEQ\r\n\r\n@temp                          //Goes to the next pointer location\r\nA=M+1\r\nD=M\r\n\r\n@LOOP2                         //Jumps to beginning of loop.\r\n0;JMP\r\n\r\n(COPY)                         //Copies data from required node to 100t register in RAM\r\n@temp                    \r\nA=M\r\nD=M\r\n@100\r\nM=D\r\n\r\n@END                           //Jumps to end  \r\n0;JMP\r\n\r\n(COPY1)                        //Copies data from first node to 100th register in RAM\r\n@ptr1\r\nA=M\r\nD=M\r\n@100\r\nM=D\r\n\r\n(END)                           //Jumps to end\r\n@END\r\n0;JMP\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"results-seeing-the-linked-list-in-action\"\u003eResults: Seeing the Linked List in Action\u003c/h2\u003e\n\u003cp\u003eAfter running the program, we can observe the RAM registers\u0026rsquo; state, which should now reflect the nodes of our linked list with their respective data values and addresses. It\u0026rsquo;s a testament to the successful implementation of a linked list in the Hack language environment.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/nand2tetris_linked_list/linkedlist_third.png\" alt=\"RAM after program execution\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFig - The RAM showing data values at specified nodes, confirming our implementation works.\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"wrapping-up\"\u003eWrapping Up\u003c/h2\u003e\n\u003cp\u003eThis project underscores not only the versatility of data structures like linked lists but also the foundational understanding Nand2Tetris promotes. By implementing a linked list in Hack language, we\u0026rsquo;ve navigated machine-level operations and data management, essential skills for any budding computer scientist or seasoned software engineer keen on grasping computer operation at its most fundamental level.\u003c/p\u003e\n","description":null,"image":"/images/nand2tetris_linked_list/img_main.jpg","permalink":"https://codevardhan.github.io/posts/2019-11-10-nand2tetris-linked-list/","title":"Creating a Linked List in Hack Language - A Nand2Tetris Project Breakdown"},{"content":"\u003ch1 id=\"amfoss-tasks\"\u003eAMFOSS TASKS\u003c/h1\u003e\n\u003cp\u003e\u0026ldquo;Success is normally found in a pile of mistakes.\u0026rdquo; - Tim Fargo\u003c/p\u003e\n\u003cp\u003eIf there was ever a point in my life where I felt this quote, it is after I started doing the tasks required for joining the amFOSS club at Amrita Vishwa Vidyapeetham.\u003c/p\u003e\n\u003cp\u003eAmFOSS is an open source club consisting of a few motivated students promoting and contributing to free and open source software. This helps students to learn out of academics and get introduced to the outside world. So, quite naturally I was interested in joining the club. I came to know about this club through quora. There were a lot of posts on the club(which I found out later was a result of foss members spamming the website).\u003c/p\u003e\n\u003ch2 id=\"task-12\"\u003etask-1,2\u003c/h2\u003e\n\u003cp\u003eMy first direct introduction to amFOSS, however was through the induction ceremony organized by the college. I registered for the club immediately, and soon got the tasks. At first, I was feeling quite good about the tasks. Task 1 was a breeze, all I had to do was run an automated script on GitHub. Task 2 was a bunch of typical programming challenges. I had learnt python during my vacations as I had way too much free time on my hand. That came in handy and I did the challenges using python.\u003cbr/\u003e\n\u003ca href=\"https://github.com/hvm2k1/amfoss-tasks/tree/master/task%201\"\u003eTASK 1\u003c/a\u003e\u003cbr/\u003e\n\u003ca href=\"https://github.com/hvm2k1/amfoss-tasks/tree/master/task%202\"\u003eTASK 2\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"task-3\"\u003etask 3\u003c/h2\u003e\n\u003cp\u003eAfter these, I started working on task 3. This task was very close to making me successfully pull my hair out. I had to create a program for scraping google search using ruby and nokogiri. I read through most of the documentation of ruby and nokogiri. I also scraped a smaller website as a part of a blog post tutorial. So I was feeling quite confident in cracking this task; which was until I actually started doing the task. I had underestimated the complexity of a google search page, and no matter what I tried, I could not parse any sort of useful result from it. I immediately pinned this on my lack of knowledge of HTML and CSS. To rectify this issue, I started learning HTML and CSS from an online source. It took me about two days to learn the syntaxes of HTML and CSS.(Even though it was explicitly mentioned in the pdf given to us to not get sidetracked into learning a whole language, I couldn\u0026rsquo;t stop until I felt that I had knowledge of the basics). This did give me clearer understanding of the problem and made the use of nokogiri much easier, but at the end of the day, I had no results to display. It almost seemed to me that the google search page was built in a way to prevent scraping. That is as far a progress I got in that task.\u003cbr/\u003e\n\u003ca href=\"https://github.com/hvm2k1/amfoss-tasks/tree/master/task%203\"\u003eTASK 3\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\n\u003ch2 id=\"task-4\"\u003etask-4\u003c/h2\u003e\n\u003cp\u003eDejected at not being able to solve the task, I moved on to the next task, \u0026ldquo;Advanced XOR\u0026rdquo;. I was completely new to encryption of all sorts. So, I read about encryption and learnt what the terms key, check hash, ciphertext stood for. Then I proceeded to read the encryption script. I tried doing it for a bit of time, but then I simply could not understand it.\u003c/p\u003e\n\u003ch2 id=\"task-5\"\u003etask-5\u003c/h2\u003e\n\u003cp\u003eThis brings us to the next task. I started this task with apprehension because graphQL was a relatively new language. I started out with reading about API\u0026rsquo;s and the different ways they are used to query information. Then I read about rEST API, I understood that graphQL was an improvement to rEST since several instances of data could be returned in a single query compared to rEST which requires multiple queries to get the same results. After aquiring this knowledge I started working on my website. This proved to be relatively simple and I finished it in about a day. I also read about graphQL on multiple websites and since there wasn\u0026rsquo;t much information on it, I relied heavily on it\u0026rsquo;s official documentation. Graphiql explorer was a fun way of trying graphQl and I started experimentation. Since the syntax was easy, I got the query working there. This is where I ran into my blockers. I had two main blockers in this task and they haunt me to this day. They were -\ni) Authenticating the query from javascript.\nii) Implementing graphQL in javascript.\nThis took up about 1/3rd of my total time and was a huge pain in the ass.\nI looked at a variety of libraries and clients to resolve the issue. They include graphql.js, nodejs, apollo client for graphql. I even went as far trying to execute it through a python script using django after reading through the method in which they implemented it on GitLit repositary on amFOSS directly. Needless to say, I learnt how not to approach an issue through this task. I wasted a lot of time on this that could be used in other tasks.\u003cbr/\u003e\n\u003ca href=\"https://github.com/hvm2k1/amfoss-tasks/tree/master/task%205\"\u003eTASK 5\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\n\u003ch2 id=\"task-67\"\u003etask 6,7\u003c/h2\u003e\n\u003cp\u003eI made negligible progress in tasks 6,7. All I did was study the syntax of rust and installed it on my laptop.\u003c/p\u003e\n\u003ch2 id=\"task-8\"\u003etask 8\u003c/h2\u003e\n\u003cp\u003eCaptcha breaking was a very simple task and it was a welcome addition after task 5. All I did was install a couple of packages from google.(Tesseract OCR). After that it was fairly straightforward to get the text from images using the OCR.\u003cbr/\u003e\n\u003ca href=\"https://github.com/hvm2k1/amfoss-tasks/tree/master/task%208\"\u003eTASK 8\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\n\u003ch2 id=\"task-9\"\u003etask 9\u003c/h2\u003e\n\u003cp\u003eCreating a website using jekyll themes was also pretty straightforward. Here, the knowledge I got by learning HTML, CSS came into handy and editing the website was a breeze. I found out this super cool minimalistic theme from jekyll themes, forked it and got a website without much fuss.\u003cbr/\u003e\n\u003ca href=\"https://github.com/hvm2k1/amfoss-tasks/tree/master/task%209\"\u003eTASK 9\u003c/a\u003e\u003cbr/\u003e\u003c/p\u003e\n","description":null,"image":"/images/amfoss_post/amfoss_post.png","permalink":"https://codevardhan.github.io/posts/2019-08-20-amfoss-tasks/","title":"Applying to AMFOSS open source club"}]